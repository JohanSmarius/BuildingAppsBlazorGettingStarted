@page "/animaloverview"
@using AnimalShelter.Shared
@using AnimalShelter.Client.Services
@using Microsoft.AspNetCore.Authorization


@attribute [Authorize]


<h3>Animals</h3>

@if (!AnimalsInShelter.Any())
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5">


        @foreach (var animal in AnimalsInShelter)
        {
            <div class="col mb-4">
                <AnimalCard CurrentAnimal="animal" OnAnimalAdopted="AdoptAnimal" />
            </div>
        }
    </div>

    <button class="btn btn-primary" @onclick="AddAnimal">Add Animal</button>
}


@code {

    private IEnumerable<Animal> AnimalsInShelter { get; set; } = new List<Animal>();

    [Inject]
    private IJSRuntime JsRuntime { get; set; }

    [Inject]
    private IAnimalService AnimalService { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {
        AnimalsInShelter = await AnimalService.GetAllAnimals();
    }

    private async Task AdoptAnimal(Animal animalToAdopt)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("animalshelterjavascriptfunctions.confirm", $"Are you sure you want {animalToAdopt.Name} to be adopted?");

        if (confirmed)
        {
            // Delete the animal
            await AnimalService.AdoptAnimal(animalToAdopt);

            AnimalsInShelter = await AnimalService.GetAllAnimals();
        }
    }

    private async Task AddAnimal()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        Console.WriteLine($"{user.Identity.Name} want to add an animal");

        navigationManager.NavigateTo("/AnimalDetail");
    }
}
